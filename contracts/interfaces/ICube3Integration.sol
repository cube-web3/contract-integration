// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

/// @title CUBE3 Integration.
/// @author CUBE3.ai
/// @notice Facilitates connection to the CUBE3 Protocol and CUBE3's RASP (Runtime Application Self Protection) functionality
///         for functions in the derived contract (integration).
/// @dev Provides any contract that inherits {Cube3Integration} the ability to enable/disable protection
///      on a per-function basis by decorating them with the `cube3Protected` modifier.
/// @dev This module is used through inheritance.
/// @dev Function protection state storage is local to this contract.
/// @dev Relies on the off-chain CUBE3 Risk API which supplies the `cube3SecurePayload` data.
/// @dev Can be decoupled from the CUBE3 Protocol by disabling the function protection status for protected functions.
/// @dev All protection functionality is opt-in (disabled by default) and must be enabled by the `_securityAdmin`.
/// @dev Anyone can deploy a Cube3Integration contract, however the integration (the derived contract)'s `_securityAdmin`
///      must call {registerIntegrationWithCube3} post-deployment to register the integration with the CUBE3 Protocol.
/// @dev This contract is designed for use with standalone integrations, ie. without a proxy. All delegatecalls to this contract will revert.

interface ICube3Integration {
    /*//////////////////////////////////////////////////////////////
            EVENTS
    //////////////////////////////////////////////////////////////*/

    /// @notice Emitted when a new Cube3Integration integration is deployed.
    /// @dev Emitted in the constructor and used to inform the Cube3 service that a new integration
    ///      has been deployed.
    /// @param self The contract address (this) of the new integration.
    /// @param admin The default securityAdmin account at the time of deployment, ie the deployer.
    event Cube3IntegrationDeployment(address indexed self, address indexed deployer, address indexed admin);

    /// @notice Emitted when the protection statuses of functions are updated.
    /// @dev Indicates whether the protection status is enabled/disabled for each selector.
    /// @param fnSelectors The array of function selectors of the protected functions.
    /// @param enabled Booleans indicating whether protection is enabled for the function at the corresponding index in the `fnSelectors` array.
    event StandaloneFunctionProtectionStatusUpdated(bytes4[] fnSelectors, bool[] enabled);

    /*//////////////////////////////////////////////////////////////
            FUNCTIONS
    //////////////////////////////////////////////////////////////*/

    /// @notice Registers this contract as an integration with the Cube3 Router.
    /// @dev Initiates a two step registration process that goes: Cube3Integration -> Cube3Router -> Cube3GateKeeper.
    /// @dev The router calls back to this contract's {supportsInterface} to check for compliance.
    /// @dev Must be called before function protections can be enabled.
    /// @dev Registration event is emitted in the GateKeeper. See {Cube3GateKeeper-complete2StepIntegrationRegistration}.
    /// @dev Can only be called by the security admin.
    /// @dev Security Admin must request a `registrarSignature` (token) off-chain from the CUBE3 platform.
    /// @dev An empty `enabledByDefaultFnSelectors` array can be passed to leave function protection disabled by default for
    ///      all functions decorated with the {cube3Protected} modifier.
    /// @param registrarSignature The signature of the generated by the integration's registrar (AKA signing authority).
    /// @param enabledByDefaultFnSelectors The function selectors for the protected functions whose protection
    ///        status should be enabled by default. Will be set to True if included in the array
    function registerIntegrationWithCube3(
        bytes calldata registrarSignature,
        bytes4[] calldata enabledByDefaultFnSelectors
    ) external;

    /// @notice Sets the protection status of multiple functions.
    /// @dev Only functions that are decorated with the `cube3Protected` modifier will be affected.
    /// @dev Can only be called by the `_securityAdmin`.
    /// @dev Reads status values from the corresponding array indexes, ie. `fnSelectors[i]` -> `isEnabled[i]`.
    /// @param fnSelectors Array of the bytes4 function selectors of the protected functions.
    /// @param isEnabled Array of boolean values containing the status of the selectors at the corresponding indices.
    function setFunctionProtectionStatus(bytes4[] calldata fnSelectors, bool[] calldata isEnabled) external;

    /// @notice Convenience function for retrieving the integration contract details.
    /// @dev Can be used to determine if the integration uses a proxy.
    /// @dev If the integration is a proxy, returns (proxy, implementation)
    /// @dev Else if it is a standalone contract, returns (integration, integration)
    /// @return The integration (or proxy) address and integration (or implementation) address.
    function self() external view returns (address, address);

    /// @notice Retrieves the protection status of an individual function.
    /// @dev The status of each function is stored in a map where (selector=>enabled).
    /// @dev Can be called by anyone to query the protection status of the function selector provided.
    /// @param fnSelector The bytes4 function selector of the function status to be queried.
    /// @return A boolean indicating the protection status, where enabled = true.
    function isFunctionProtectionEnabled(bytes4 fnSelector) external view returns (bool);

    /// @notice Retrieves the protection status of multiple functions.
    /// @param fnSelectors Array of the bytes4 function selectors.
    /// @return Array of enabled (True) or disabled (False) status for each function selector supplied.
    function batchIsFunctionProtectionEnabled(bytes4[] calldata fnSelectors) external view returns (bool[] memory);
}
