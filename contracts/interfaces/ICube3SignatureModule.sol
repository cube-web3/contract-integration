// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

/// @title Cube3 Signature Module.
/// @author CUBE3.ai
/// @notice Cube3 Runtime Application Self-Protection (RASP) module for signature verification and
///         data validation.  The module is responsible for verifying that the payload received by the module was
///         generated by the Cube3 Risk API, and that the data it contains can be validated by recovering
///         the signing authority from the signature and the on-chain data.
/// @dev Inherits core module functionality from the Cube3Module contract.
/// @dev There's no access control implemented as no functionality requires elevated privileges.
/// @dev Module emits no events as a gas-saving measure.
interface ICube3SignatureModule {
    /*//////////////////////////////////////////////////////////////
            DATA STRUCTURES
    //////////////////////////////////////////////////////////////*/

    /// @notice Defines the structure of the cube3SecurePayload and its contents for the Cube3 Signature Module.
    /// @dev The `cube3SecurePayload` is passed in as function parameter to all Cube3Integration integration functions.
    struct Cube3SignatureModulePayload {
        bytes4 moduleFnSelector;
        bytes32 moduleVersion;
        uint256 expirationTimestamp;
        bool shouldTrackNonce;
        uint256 nonce;
        bytes signature;
    }

    /*//////////////////////////////////////////////////////////////
            FUNCTIONS
    //////////////////////////////////////////////////////////////*/
    /// @notice Retrieves the integration-specific nonce for an account.
    /// @dev Each module keeps track of its own nonce for each integration the account interacts with.
    /// @dev Checks that the payload's validity has not expired.
    /// @dev Retrieves the integration contracts signing authority from the {Cube3Registry},
    /// @dev Recreates the hashed data that was signed off-chain, using on-chain data.
    /// @param integrationContract The contract address of the Cube3Integration integration.
    /// @param account The account to retrieve the nonce for.
    /// @return The nonce for the account for the supplied `integrationContract`.
    function integrationUserNonce(address integrationContract, address account) external view returns (uint256);

    /// @notice Validates the transaction data provided using the signature contained in `cube3SecurePayload`.
    /// @dev Can only be called by the Cube3Router.
    /// @param integrationMsgSender The msg.sender of the Cube3Integration integration's function call.
    /// @param integrationSelf The address of the Cube3Integration integration, or the implementation if it's a proxy.
    /// @param integrationOrProxy The integration's address, or the proxy's address if it's a proxy.
    /// @param integrationMsgValue The msg.value of the Cube3Integration integration's function call.
    /// @param integrationMsgDataLessPayload The msg.data of the Cube3Integration integration's function call, but without
    ///                                      the `cube3SecurePayload`.
    /// @param cube3SecurePayload The secure payload provided by the CUBE3 Risk API.
    function validateSignature(
        address integrationMsgSender,
        address integrationSelf,
        address integrationOrProxy,
        uint256 integrationMsgValue,
        bytes calldata integrationMsgDataLessPayload,
        bytes memory cube3SecurePayload
    ) external returns (bool);
}
